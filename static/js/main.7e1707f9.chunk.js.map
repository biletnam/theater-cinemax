{"version":3,"sources":["components/TheaterSeat.js","components/TheaterColumn.js","components/Theater.js","utils.js","components/CustomInput.js","store/actions/types.js","components/MultipleSeat.js","components/SeatSwitch.js","store/actions/index.js","components/BookingSummary.js","components/BookingForm.js","components/SeatSelector.js","components/BookingSeatCategory.js","routes.js","containers/Booking.js","components/Statistics.js","core/Seat.js","store/reducers/index.js","core/Theater.js","store/index.js","components/Notifications.js","components/App.js","index.js"],"names":["TheaterSeat","seat","this","props","react_default","a","createElement","className","concat","helpers","class","key","icon","Component","TheaterColumn","_this$props","theater","row","columns","map","column","getSeatInPositon","TheaterSeat_TheaterSeat","makeColumns","Theater","rows","TheaterColumn_TheaterColumn","connect","_ref","createArray","length","callback","arguments","undefined","number","Array","from","index","CustomInput","e","onChange","currentTarget","value","type","attributes","handleChange","bind","renderSelect","Object","assign","generateOptions","_this","data","options","keys","makeOption","isArray","useKeysAsValues","label","renderInput","types","updateSeatCateogry","updateBookingError","updateToBookSeats","toogleSeatBooking","updateError","processBooking","updateErrorMessage","MultipleSeat","seats","makeSeat","SeatSwitch","join","combineKeys","isAdding","checked","toggleBooking","toBookSeats","cart","bookedSeats","getSeatKey","find","MultipleSeat_MultipleSeat","isChecked","addToCart","_ref2","dispatch","toggleSeatBooking","error","BookingSummary","react","computeTotal","disabled","cantBook","values","components_SeatSwitch","reduce","prev","next","categories","price","category","toLocaleString","BookingForm","onSubmit","submit","CustomInput_CustomInput","availableSeats","seatCategories","updateCategory","components_BookingSummary","results","forEach","name","preventDefault","book","SeatSelector","seatCategory","seatName","BookingSeatCategory","components_SeatSelector","routes","text","path","component","components_BookingForm","components_BookingSeatCategory","Seat","classCallCheck","isAvailable","isReserved","prop","categoryMap","isTwinSeat","isVeryVip","isVip","isEconomy","method","twinSeat","getCurrentCategoryProp","convertNumberToAlphabet","setSeats","setRowSeats","Error","String","fromCharCode","_this2","filter","chunk","objectSpread","defineProperty","initialState","errorMessage","successMessage","reducer","AppReducer","state","errorMesssage","payload","getAvailableSeatsForCategory","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","createStore","setState","nextState","applyMiddleware","logger","Notifications","message","App","es","store","BrowserRouter","id","route","NavLink","to","exact","components_Notifications","Route","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.7e1707f9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class TheaterSeat extends Component {\n    render() {\n        const { seat } = this.props;\n\n        return (\n            <div className={`theater-seat ${seat.helpers.class}`}>\n                <sup className=\"theater-seat-key\">{seat.key}</sup>\n                <span className=\"theater-seat-symbol\">{seat.helpers.icon}</span>\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\nimport TheaterSeat from './TheaterSeat';\nexport default class TheaterColumn extends Component {\n    makeColumns() {\n        const { theater, row } = this.props;\n        return theater.columns.map(column => {\n            const seat = theater.getSeatInPositon(row, column);\n            return <TheaterSeat key={seat.key} seat={seat} />;\n        });\n    }\n    render() {\n        return <div className=\"theater-column\">{this.makeColumns()}</div>;\n    }\n}\n","import React, { Component } from 'react';\nimport TheaterColumn from './TheaterColumn';\nimport { connect } from 'react-redux';\nclass Theater extends Component {\n    render() {\n        const { theater } = this.props;\n        return (\n            <div>\n                {theater.rows.map(row => (\n                    <TheaterColumn theater={theater} row={row} key={row} />\n                ))}\n            </div>\n        );\n    }\n}\nconst mapStateToProps = ({ theater }) => ({ theater });\nexport default connect(mapStateToProps)(Theater);\n","/**\n * Creates an array of a given Length\n * @param  {Number}   length\n * @param  {Function|null} callback\n * @return {Array}\n */\nexport const createArray = (length, callback = number => number) =>\n    Array.from({ length }, (number, index) => callback(++index));\n","import React, { Component } from 'react';\n\nimport { createArray } from '../utils';\n\nexport default class CustomInput extends Component {\n    handleChange(e) {\n        if (this.props.onChange) {\n            this.props.onChange(e.currentTarget.value);\n        }\n    }\n    renderInput() {\n        const type = this.props.type || 'text';\n\n        const attributes = {\n            className: 'input',\n            onChange: this.handleChange.bind(this),\n        };\n\n        if (type === 'select') {\n            return this.renderSelect(attributes);\n        }\n        return <input type={type} {...attributes} />;\n    }\n\n    renderSelect(attributes) {\n        return (\n            <select {...attributes}>\n                <option value=\"\">Select ...</option>\n                {this.generateOptions()}\n            </select>\n        );\n    }\n    generateOptions() {\n        const data = this.props.options || [];\n\n        // if we are dealing with an object, then the values will be the object\n        // keys and what is displayed will be the object values\n        if (data !== null && typeof data === 'object') {\n            return Object.keys(data).map(key =>\n                this.makeOption(data[key], key, true)\n            );\n        }\n        if (Array.isArray(data)) {\n            return data.map(this.makeOption);\n        }\n        // if data is a number, then we will iterate from o to that number\n        if (+data) {\n            return createArray(data, this.makeOption);\n        }\n    }\n    makeOption(value, key, useKeysAsValues = false) {\n        return (\n            <option key={key || value} value={useKeysAsValues ? key : value}>\n                {value}\n            </option>\n        );\n    }\n    render() {\n        const { label } = this.props;\n        return (\n            <div className=\"form-group\">\n                {label && <label>{label}</label>}\n                {this.renderInput()}\n            </div>\n        );\n    }\n}\n","export default {\n    updateSeatCateogry: 'UPDATE-SEAT-CATEGORY',\n    updateBookingError: 'UPDATE-BOOKING-ERROR',\n    updateToBookSeats: 'UPDATE-NUMBER-OF-SEATS-TO-BE-BOOKED',\n    toogleSeatBooking: 'ADD-SEAT-TO-BOOKING-CART',\n    updateError: 'UPDATE-CURRENT-ERROR',\n    processBooking: 'PROCESS-CART-BOOKING',\n    updateErrorMessage: 'UPDATES-CURRENT-ERROR-MESSAGE',\n};\n","import React, { Component } from 'react';\n\nexport default class MultipleSeat extends Component {\n    makeSeat() {\n        let { seat: seats } = this.props;\n\n        // wrap all seats in an array\n        if (!Array.isArray(seats)) {\n            seats = [seats];\n        }\n\n        return seats.map(seat => <span key={seat.key}>{seat.key}</span>);\n    }\n    render() {\n        return <span className=\"d-flex multiple-seat\">{this.makeSeat()}</span>;\n    }\n}\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { toggleSeatBooking, updateErrorMessage } from '../store/actions';\nimport MultipleSeat from './MultipleSeat';\nclass SeatSwitch extends Component {\n    combineKeys(seats) {\n        return seats.map(({ key }) => key).join('');\n    }\n\n    getSeatKey() {\n        const { seat } = this.props;\n        return Array.isArray(seat) ? this.combineKeys(seat) : seat.key;\n    }\n\n    addToCart(e) {\n        const isAdding = e.currentTarget.checked;\n\n        const {\n            seat,\n            toggleBooking,\n            toBookSeats,\n            cart,\n            updateErrorMessage,\n        } = this.props;\n\n        const bookedSeats = Object.keys(cart).length;\n        if (!toBookSeats) {\n            return updateErrorMessage(\n                'Please select the number of tickets you would want to book'\n            );\n        }\n        if (isAdding && bookedSeats >= toBookSeats) {\n            return updateErrorMessage(\n                'The number of required seats has already been achieved'\n            );\n        }\n        toggleBooking(seat, this.getSeatKey());\n    }\n    isChecked() {\n        const { cart } = this.props;\n        return (\n            Object.keys(cart).find(key => key === this.getSeatKey()) || false\n        );\n    }\n    render() {\n        return (\n            <div className=\"theater-seat theater-seat-has-switch\">\n                <MultipleSeat seat={this.props.seat} />\n                <label className=\"switch\">\n                    <input\n                        type=\"checkbox\"\n                        checked={this.isChecked()}\n                        onChange={this.addToCart.bind(this)}\n                    />\n                    <span className=\"slider round\" />\n                </label>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = ({ cart, toBookSeats }) => ({\n    cart,\n    toBookSeats,\n});\nconst mapActionsToProps = dispatch => ({\n    toggleBooking: (seat, key) => dispatch(toggleSeatBooking(seat, key)),\n    updateErrorMessage: error => dispatch(updateErrorMessage(error)),\n});\nexport default connect(\n    mapStateToProps,\n    mapActionsToProps\n)(SeatSwitch);\n","import types from './types';\nexport const updateSeatCateogry = category => ({\n    type: types['updateSeatCateogry'],\n    category,\n});\n\nexport const updateToBookSeats = value => ({\n    type: types['updateToBookSeats'],\n    value,\n});\n\nexport const toggleSeatBooking = (seat, key) => ({\n    type: types['toogleSeatBooking'],\n    seat,\n    key,\n});\n\nexport const updateErrorMessage = error => ({\n    type: types['updateErrorMessage'],\n    error,\n});\n\nexport const processBooking = () => ({ type: types['processBooking'] });\n","import React, { Component, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport SeatSwitch from './SeatSwitch';\nimport { categories } from '../config';\nclass BookingSummary extends Component {\n    render() {\n        const { cart } = this.props;\n        return (\n            <Fragment>\n                <div className=\"alert alert-primary mt-1\">\n                    Total: {this.computeTotal()}\n                </div>\n                <div>\n                    <button className=\"btn\" disabled={this.cantBook()}>\n                        Book\n                    </button>\n                </div>\n                <div className=\"d-flex flex-wrap jcc bg-gray mt-1 booked-seats\">\n                    {Object.values(cart).map((seat, index) => (\n                        <SeatSwitch key={index} seat={seat} />\n                    ))}\n                </div>\n            </Fragment>\n        );\n    }\n    computeTotal() {\n        const { cart } = this.props;\n        const total = Object.values(cart).reduce((prev, next) => {\n            const nextTotal = Array.isArray(next)\n                ? categories['twinSeat'].price * 2\n                : categories[next.category].price;\n            return prev + nextTotal;\n        }, 0);\n        return total.toLocaleString();\n    }\n    cantBook() {\n        const { cart, toBookSeats } = this.props;\n        const bookedSeats = Object.keys(cart).length;\n        return !bookedSeats || bookedSeats < toBookSeats;\n    }\n}\nconst mapStateToActions = ({ cart, toBookSeats }) => ({ cart, toBookSeats });\nexport default connect(mapStateToActions)(BookingSummary);\n","import React, { Component, Fragment } from 'react';\nimport CustomInput from './CustomInput';\nimport { categories } from '../config';\nimport { connect } from 'react-redux';\nimport {\n    updateSeatCateogry,\n    updateToBookSeats,\n    processBooking,\n} from '../store/actions';\nimport BookingSummary from './BookingSummary';\nclass BookingForm extends Component {\n    render() {\n        return (\n            <Fragment>\n                <form\n                    className=\"booking-form\"\n                    onSubmit={this.submit.bind(this)}\n                >\n                    <CustomInput\n                        label=\"Number of Seats to book\"\n                        type=\"select\"\n                        options={this.props.availableSeats}\n                        onChange={this.props.updateToBookSeats}\n                    />\n                    <CustomInput\n                        label=\"Seat category\"\n                        type=\"select\"\n                        options={this.seatCategories()}\n                        onChange={this.props.updateCategory}\n                    />\n                    <BookingSummary />\n                </form>\n            </Fragment>\n        );\n    }\n\n    seatCategories() {\n        const results = {};\n        Object.keys(categories).forEach(\n            category => (results[category] = categories[category].name)\n        );\n        return results;\n    }\n\n    submit(e) {\n        e.preventDefault();\n        this.props.book();\n    }\n}\n\nconst mapStateToActions = ({ availableSeats, cart }) => ({\n    availableSeats: availableSeats.length,\n    cart,\n});\n\nconst mapActionsToProps = dispatch => ({\n    updateCategory: value => dispatch(updateSeatCateogry(value)),\n    updateToBookSeats: value => dispatch(updateToBookSeats(value)),\n    book: () => dispatch(processBooking()),\n});\nexport default connect(\n    mapStateToActions,\n    mapActionsToProps\n)(BookingForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { categories } from '../config';\nimport SeatSwitch from './SeatSwitch';\nclass SeatSelector extends Component {\n    render() {\n        const { seatCategory, availableSeats } = this.props;\n        const { name: seatName } = categories[seatCategory];\n\n        return (\n            <div>\n                <h4 className=\"text-center\">\n                    Available\n                    <strong className=\"text-primary\"> {seatName} </strong>\n                    Seats\n                </h4>\n                <div className=\"d-flex flex-wrap jcc\">\n                    {availableSeats.map((seat, index) => (\n                        <SeatSwitch key={index} seat={seat} />\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\nconst mapStateToProps = ({ seatCategory, availableSeats }) => ({\n    seatCategory,\n    availableSeats,\n});\n\nexport default connect(mapStateToProps)(SeatSelector);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport SeatSelector from './SeatSelector';\nclass BookingSeatCategory extends Component {\n    render() {\n        let { seatCategory } = this.props;\n\n        return (\n            <div className=\"booking-seat-category\">\n                {seatCategory && <SeatSelector />}\n            </div>\n        );\n    }\n}\nconst mapStateToProps = ({ seatCategory, availableSeats }) => ({\n    seatCategory,\n    availableSeats,\n});\nexport default connect(mapStateToProps)(BookingSeatCategory);\n","import Theater from './components/Theater';\nimport Booking from './containers/Booking';\nimport Statistics from './components/Statistics';\nexport default [\n    {\n        text: 'Theater',\n        path: '/',\n        component: Theater,\n    },\n    {\n        text: 'Booking',\n        path: '/booking',\n        component: Booking,\n    },\n    {\n        text: 'Statistics',\n        path: '/statistics',\n        component: Statistics,\n    },\n];\n","import React from 'react';\nimport BookingForm from '../components/BookingForm';\nimport BookingSeatCategory from '../components/BookingSeatCategory';\nconst Booking = () => (\n    <div className=\"booking\">\n        <BookingForm />\n        <BookingSeatCategory />\n    </div>\n);\n\nexport default Booking;\n","import React, { Component } from 'react';\n\nexport default class Statistics extends Component {\n    render() {\n        return <div>Statistics</div>;\n    }\n}\n","import { categories } from '../config.json';\n\nexport default class Seat {\n    /**\n     * Creates an instance of the Seat class\n     * @param  {String} row\n     * @param  {Number} column\n     * @return {Seat}\n     */\n    constructor(row, column) {\n        this.row = row;\n        this.column = column;\n        this.isAvailable = true;\n        this.isReserved = false;\n    }\n    /**\n     * Gets the seat unique indetifier\n     * @return {String}\n     */\n    get key() {\n        return this.row + this.column;\n    }\n\n    /**\n     * Determines the category seat\n     * @return {String|Null}\n     */\n    get category() {\n        const categoryMap = {\n            isTwinSeat: 'twinSeat',\n            isVeryVip: 'veryVip',\n            isVip: 'vip',\n            isEconomy: 'economy',\n        };\n\n        const key = Object.keys(categoryMap).find(method => this[method]);\n        return categoryMap[key];\n    }\n    /**\n     * Determines if a given seat is a twin seat\n     * @return {Boolean}\n     */\n    get isTwinSeat() {\n        return (\n            (this.row === 'A' || this.row === 'B') &&\n            (this.column >= 5 && this.column <= 15)\n        );\n    }\n    /**\n     * Determines if a given seat is `Very VIP`\n     * @return {Boolean}\n     */\n    get isVeryVip() {\n        return (\n            (!this.twinSeat && (this.row === 'A' || this.row === 'B')) ||\n            (this.row >= 'C' && this.row <= 'F')\n        );\n    }\n    /**\n     * Determines if a given seat is vip\n     * @return {Boolean}\n     */\n    get isVip() {\n        return this.row >= 'G' && this.row <= 'L';\n    }\n    /**\n     * Determine if a give seat is Economy\n     * @return {Boolean}\n     */\n    get isEconomy() {\n        return this.row >= 'M' && this.row <= 'P';\n    }\n    /**\n     * Gets the price of the seat\n     * @return {Number}\n     */\n    get price() {\n        return this.getCurrentCategoryProp('price');\n    }\n    /**\n     * Gets the seat label\n     * @return {String}\n     */\n    get label() {\n        return this.getCurrentCategoryProp('name');\n    }\n    /**\n     * Gets the class and icon based on the seat status\n     * @return {Object}\n     */\n    get helpers() {\n        if (this.isAvailable) return { class: 'available', icon: '*' };\n\n        if (this.isReserved) return { class: 'reserved', icon: 'o' };\n\n        return { class: 'booked', icon: '#' };\n    }\n    /**\n     * Gets a given property of the current category\n     * @param  {String} prop\n     * @return {String|Number}\n     */\n    getCurrentCategoryProp(prop) {\n        return this.category && categories[this.category][prop];\n    }\n    /**\n     * Reserves or un reserves a given seat\n     * @param  {Boolean} value\n     * @return {Seat}\n     */\n    reserve(value = true) {\n        this.isAvailable = !value;\n        this.isReserved = value;\n        return this;\n    }\n    /**\n     * Sets the isAvaliable status of a seat\n     * @param {Boolean} value\n     */\n    setAvailable(value = true) {\n        this.isAvailable = value;\n        return this;\n    }\n    /**\n     * Books the current seat\n     * @return {Seat}\n     */\n    book() {\n        this.isReserved = false;\n        this.isAvailable = false;\n        return this;\n    }\n}\n","import TheaterCore from '../../core/Theater';\nimport types from '../actions/types';\n\nconst Theater = new TheaterCore();\n\nconst initialState = {\n    theater: Theater,\n    errorMessage: '',\n    successMessage: '',\n    toBookSeats: 0,\n    seatCategory: null,\n\n    cart: {},\n    availableSeats: Object.keys(Theater.seats),\n};\nclass AppReducer {\n    /**\n     * Creates an instance of the reducer class\n     * @return {AppReducer}\n     */\n    constructor() {\n        this.state = initialState;\n    }\n    /**\n     * Sets the state\n     * @param {Object|null} state\n     */\n    setState(state) {\n        if (state) {\n            //time to clear all messages\n            this.state = { ...state, errorMesssage: '', successMessage: '' };\n        }\n        return this;\n    }\n    /**\n     * Returns the next state\n     * @param  {Mixed} payload\n     * @return {Object} The next state object\n     */\n    nextState(payload) {\n        //all action types exist on this class ,so  we will spin through them\n        //unitll we get our first match and trigger it if we dont find any match\n        //we will return the initial state which is what the swith does!\n        const { type } = payload;\n\n        for (let method in types) {\n            if (types[method] === type && this[method]) {\n                //we return the default state if the method returns nothing\n                return this[method](payload) || this.state;\n            }\n        }\n        return this.state;\n    }\n    /**\n     * Updates the number of seats to be booked\n     * @param  {Object} payload\n     * @return {Object}\n     */\n    updateToBookSeats(payload) {\n        return { ...this.state, toBookSeats: +payload.value };\n    }\n    /**\n     * Updates the seat category\n     * @param  {Object} payload\n     * @return {Object}\n     */\n    updateSeatCateogry(payload) {\n        const { category } = payload;\n\n        return {\n            ...this.state,\n            seatCategory: category,\n            availableSeats: Theater.getAvailableSeatsForCategory(category),\n        };\n    }\n    /**\n     * Toggles a given seat to and from the cart\n     * @param  {Object} payload\n     * @return {Object}\n     */\n    toogleSeatBooking(payload) {\n        const { cart } = this.state;\n        const { key, seat } = payload;\n\n        cart[key] ? delete cart[key] : (cart[key] = seat);\n        return { ...this.state, cart: { ...cart } };\n    }\n    /**\n     * Updates the error mesage\n     * @param  {Object} payload\n     * @return {Object}\n     */\n    updateErrorMessage(payload) {\n        const { error } = payload;\n        return { ...this.state, errorMessage: error };\n    }\n    /**\n     * Process the current items in the booking cart\n     * @return {Object}\n     */\n    processBooking() {\n        const { cart } = this.state;\n        Object.values(cart).forEach(seat => {\n            Array.isArray(seat)\n                ? seat.forEach(Theater.book)\n                : Theater.book(seat);\n        });\n        return {\n            ...initialState,\n            cart: {},\n            successMessage: 'Booking was successfully processed',\n        };\n    }\n}\nconst reducer = new AppReducer();\n\nexport default (state, payload) => {\n    return reducer.setState(state).nextState(payload);\n};\n","import Seat from './Seat';\nimport { createArray } from '../utils';\nimport chunk from 'lodash/chunk';\nclass Theater {\n    /**\n     * Creates an instance of the Theater class\n     * @return {Theater}\n     */\n    constructor() {\n        //create 16 rows from A up to P\n        this.rows = createArray(16, this.convertNumberToAlphabet);\n        this.columns = createArray(20);\n        this.bookedSeats = {};\n        this.setSeats();\n        this.book = this.book.bind(this);\n    }\n    /**\n     * Makes and sets the seats\n     */\n    setSeats() {\n        this.seats = {};\n        this.rows.forEach(this.setRowSeats.bind(this));\n    }\n    /**\n     * Sets the seats in a given row\n     * @param {String}\n     */\n    setRowSeats(row) {\n        this.columns.forEach(column => {\n            const seat = new Seat(row, column);\n            this.seats[seat.key] = seat;\n        });\n    }\n    /**\n     * Transforms a given number to its corresponding alaphabet (if it exists)\n     * @example 1=A,2=B,c=3, .... z=25\n     * @param  {Number} number\n     * @return {String}\n     */\n    convertNumberToAlphabet(number) {\n        if (!+number || number > 26 || number < 1) {\n            throw new Error(`${number} can't be converted to an alphabet`);\n        }\n        // we can use ASCII to convert numbers to letters\n        // since A is 65, we can add 64 to every number\n        return String.fromCharCode(number + 64);\n    }\n\n    /**\n     * Gets a seat located in a given position\n     * @param  {String} row\n     * @param  {Number} column\n     * @return {Seat}\n     */\n    getSeatInPositon(row, column) {\n        return this.seats[row + column];\n    }\n    /**\n     * Gets a seat in an available position\n     * @param  {String|Null} category\n     * @return {Array}\n     */\n    getAvailableSeatsForCategory(category) {\n        const seats = Object.values(this.seats).filter(seat => {\n            //look out for seats in the given category  and those that are not booked\n            return (\n                seat.category === category &&\n                !this.bookedSeats[seat.key] &&\n                seat.isAvailable &&\n                !seat.isReserved\n            );\n        });\n        return category === 'twinSeat' ? chunk(seats, 2) : seats;\n    }\n    book(seat) {\n        seat.isAvailable = false;\n        this.bookedSeats = { ...this.bookedSeats, [seat.key]: seat };\n    }\n}\n\nexport default Theater;\n","import { createStore, applyMiddleware } from 'redux';\nimport reducers from './reducers';\nimport logger from 'redux-logger';\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__;\n\nexport default createStore(reducers, composeEnhancers(applyMiddleware(logger)));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nclass Notifications extends Component {\n    render() {\n        const { errorMessage, successMessage } = this.props;\n        if (!errorMessage && !successMessage) return null;\n        //favor errors over success messages\n        const message = errorMessage || successMessage;\n        const className = errorMessage ? 'alert-danger' : 'alert-primary';\n\n        return (\n            <div className={`alert text-center mb-1 ${className}`}>\n                {message}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = ({ errorMessage, successMessage }) => ({\n    errorMessage,\n    successMessage,\n});\nexport default connect(mapStateToProps)(Notifications);\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, NavLink } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport routes from '../routes';\nimport store from '../store';\nimport Notifications from './Notifications';\nexport default class App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Router>\n                    <div id=\"main-wrapper\">\n                        <header className=\"header\">Cinemax Theater</header>\n                        <nav className=\"navbar\">\n                            {routes.map(route => (\n                                <NavLink to={route.path} key={route.text} exact>\n                                    {route.text}\n                                </NavLink>\n                            ))}\n                        </nav>\n                        <main className=\"main\">\n                            <Notifications />\n                            {routes.map(route => (\n                                <Route\n                                    key={route.text}\n                                    path={route.path}\n                                    component={route.component}\n                                    exact\n                                />\n                            ))}\n                        </main>\n                    </div>\n                </Router>\n            </Provider>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './sass/app.scss';\n\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}